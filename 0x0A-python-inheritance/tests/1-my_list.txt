The ``1-my_list`` module
========================

Using ``MyList`` class that inherited built-in ``list``.
--------------------------------------------------------
The class also contain ``print_sorted`` method.

First import the module ``1-my_list``.

::

	>>> MyList = __import__('1-my_list').MyList

Now use it.

::

	>>> my_list = MyList()

Using ``print_sorted`` method on empty list will print an empty list

::

	>>> my_list.print_sorted()
	[]

Add some elements to `my_list`

::

	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)

print `my_list`

::
	>>> print(my_list)
	[1, 4, 2, 3, 5]

The list would be sorted with the derieved class method ``print_sorted``

::

	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

::

The original list remain unchanged

::

	>>> print(my_list)
	[1, 4, 2, 3, 5]

A sorted list will remain sorted

	>>> my_list2 = MyList()
	>>> my_list2.append(0)
	>>> my_list2.append(1)
	>>> my_list2.append(2)
	>>> my_list2.append(3)

::

	>>> print(my_list2)
	[0, 1, 2, 3]

::

	>>> my_list2.print_sorted()
	[0, 1, 2, 3]

Other methods of ``list`` would still work

::

	>>> my_list.count(2)
	1

::

	>>> my_list.index(3)
	3

::

	>>> my_list.pop()
	5

::

	>>> my_list.reverse()
	>>> print(my_list)
	[3, 2, 4, 1]

``print_sorted`` will sort strings lexographically

::

	>>> my_str_list = MyList()
	>>> my_str_list.append("Python")
	>>> my_str_list.append("is")
	>>> my_str_list.append("awesome")

::

	>>> my_str_list.print_sorted()
	['Python', 'awesome', 'is']

The original string remain unchanged:

	>>> print(my_str_list)
	['Python', 'is', 'awesome']

TypeError would be raised if the argument is both strings and number:

::

	>>> my_list = MyList(("This", "contains", 5))
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	    ...
	TypeError: '<' not supported between instances of 'int' and 'str'

::

	>>> my_list = MyList([1, "two", 3, "four"])
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	    ...
	TypeError: '<' not supported between instances of 'str' and 'int'

The method cannot be called with an argument:

::

	>>> my_list.print_sorted(2)
	Traceback (most recent call last):
	    ...
	TypeError: print_sorted() takes 1 positional argument but 2 were given
